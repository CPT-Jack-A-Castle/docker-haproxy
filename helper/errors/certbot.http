HTTP/1.0 503 Service Unavailable
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Certbot Service</title>
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/solarized-light.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/bash.min.js"></script>
  </head>
  <body>
    <div id="top" class="page" role="document">
      <header role="banner">
        <h2>Generate a new certificates</h2>
        The command to get a new certificate from LetsEncrypt that we will use is this:
        <pre><code class="bash">certbot certonly --standalone -d demo.nfye.com \
--non-interactive --agree-tos --email admin@nfye.com \
--http-01-port=8888</code></pre>
        <b>SSL Certificates and HAProxy</b>
        HAProxy needs an ssl-certificate to be one file, in a certain format. To do that, we create a new directory where the SSL certificate that HAProxy reads will live.<br>
        Then we output the "live" (latest) certificates from LetsEncrypt and dump that output into the certificate file for HAProxy to use:
          <pre><code class="bash">cat /etc/letsencrypt/live/demo.nfye.com/fullchain.pem \
    /etc/letsencrypt/live/demo.nfye.com/privkey.pem \
    | tee /certs/demo.nfye.com.pem</code></pre>
        <h2>Generate wildcard SSL certificate </h2>
        <p>Now with the help of Certbot will generate wildcard certificate for our test domain erpnext.xyz:</p>
        <pre><code class="bash">certbot certonly —-manual —-preferred-challenges=dns \
-—email saurabh@erpnext.com \
—-server https://acme-v02.api.letsencrypt.org/directory \
--agree-tos \
--d *.erpnext.xyz</code></pre>
        After executing the above command, please deploy a DNS TXT record with the following:<br>
        <b>Record Name:</b> _acme-challenge<br>
        <b>Record Value:</b> Generated by Certbot<br>
        <h2>Get The Certificate</h2>
        Once you authenticate the domain ownership; by cleaning up dns challenges, Certbot generates the ssl certificate and required keys.
      </header>
      <footer role="contentinfo">
        <p>Hosted on <a href="https://cloud.docker.com/u/whumphrey/repository/docker/whumphrey/haproxy">docker</a>. Code on <a href="https://github.com/nitr8/docker-haproxy">GitHub</a>.</p>
      </footer>
    </div>
  </body>
</html>

<script>
hljs.initHighlightingOnLoad();
</script>
